{"version":3,"sources":["firebase.js","Components/Todo.js","Components/Hero.jsx","App.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","Todo","props","useState","state","setState","edit","setEdit","save","setSave","editHandler","collection","doc","todo","id","set","merge","ListItemText","placeholder","value","onChange","event","target","className","Button","variant","size","color","disabled","type","onClick","e","ButtonGroup","disableElevation","delete","App","todos","setTodos","input","setInput","useEffect","orderBy","onSnapshot","snapshot","docs","map","data","autocomplete","TextField","label","preventDefault","add","timestamp","FieldValue","serverTimestamp","i","ReactDOM","render","document","getElementById"],"mappings":"gOAaeA,EAXKC,IAASC,cAAc,CACzCC,OAAQ,0CACRC,WAAY,iCACZC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGMC,Y,4DCkDRC,MAvDf,SAAcC,GAAQ,IAAD,EACOC,oBAAS,GADhB,mBACZC,EADY,KACLC,EADK,OAEKF,mBAAS,IAFd,mBAEZG,EAFY,KAENC,EAFM,OAGKJ,mBAAS,SAHd,mBAGZK,EAHY,KAGNC,EAHM,KAKbC,EAAc,WAClBpB,EAAGqB,WAAW,SAASC,IAAIV,EAAMW,KAAKC,IAAIC,IACxC,CACEF,KAAMP,GAER,CAAEU,OAAO,IAEXX,EAASG,IAEX,OACE,qCACE,cAACS,EAAA,EAAD,UACGb,EACC,iCACE,uBACEc,YAAahB,EAAMW,KAAKA,KACxBM,MAAOb,EACPc,SAAU,SAACC,GAAD,OAAWd,EAAQc,EAAMC,OAAOH,QAC1CI,UAAU,eAGZ,cAACC,EAAA,EAAD,CACEC,QAAQ,YACRC,KAAK,QACLC,MAAM,UACNC,UAAWtB,EACXuB,KAAK,SACLC,QAAS,SAACC,GAAD,OAAOtB,EAAQC,IAN1B,qBAYFR,EAAMW,KAAKA,OAGf,eAACmB,EAAA,EAAD,CAAaC,kBAAgB,EAACR,QAAQ,YAAYE,MAAM,UAAxD,UACE,cAAC,IAAD,CACEG,QAAS,SAACT,GAAD,OACP/B,EAAGqB,WAAW,SAASC,IAAIV,EAAMW,KAAKC,IAAIoB,UAE5CT,QAAQ,WACRE,MAAM,cAER,cAAC,IAAD,CAAUG,QAASzB,OAErB,oBAAIkB,UAAU,W,SCnDL,SAASY,IAAO,IAAD,EACFhC,mBAAS,CAAC,KADR,mBACrBiC,EADqB,KACdC,EADc,OAEFlC,mBAAS,IAFP,mBAErBmC,EAFqB,KAEdC,EAFc,KAG5BC,qBAAU,WACRlD,EAAGqB,WAAW,SACX8B,QAAQ,YAAa,QACrBC,YAAW,SAACC,GACXN,EACEM,EAASC,KAAKC,KAAI,SAACjC,GAAD,MAAU,CAAEE,GAAIF,EAAIE,GAAID,KAAMD,EAAIkC,OAAOjC,eAGhE,IAWH,OACE,mCACE,sBAAKU,UAAU,OAAf,UACE,oBAAIA,UAAU,UAAd,uBACA,uBAAMA,UAAU,OAAOwB,aAAa,MAApC,UACE,cAACC,EAAA,EAAD,CACEzB,UAAU,QACVJ,MAAOmB,EACPlB,SAAU,SAACC,GAAD,OAAWkB,EAASlB,EAAMC,OAAOH,QAC3CL,GAAG,iBACHmC,MAAM,mBAGR,cAACzB,EAAA,EAAD,CACEC,QAAQ,YACRC,KAAK,QACLC,MAAM,YACNC,UAAWU,EACXT,KAAK,SACLC,QA5BM,SAACT,GACfA,EAAM6B,iBACN5D,EAAGqB,WAAW,SAASwC,IAAI,CACzBtC,KAAMyB,EACNc,UAAW7D,IAASS,UAAUqD,WAAWC,oBAE3Cf,EAAS,KAgBH,oBAWF,6BACGH,EAAMS,KAAI,SAAChC,EAAM0C,GAAP,OACT,cAAC,EAAD,CAAM1C,KAAMA,GAAWA,EAAK0C,a,MC1CzBpB,MAVf,WACE,OACE,mCACE,qBAAKZ,UAAU,kBAAf,SACE,cAAC,EAAD,SCHRiC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.2d3a6f3e.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n  apiKey: \"AIzaSyARaXKsyZlb44nx_9B4aUN3A7GKTaz_jUY\",\r\n  authDomain: \"todo-app-da7d9.firebaseapp.com\",\r\n  projectId: \"todo-app-da7d9\",\r\n  storageBucket: \"todo-app-da7d9.appspot.com\",\r\n  messagingSenderId: \"591570575065\",\r\n  appId: \"1:591570575065:web:0855641849346f79cda8c8\",\r\n  measurementId: \"G-MWBTYM6G03\",\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\nexport default db;\r\n","import React, { useState } from \"react\";\r\nimport db from \"../firebase\";\r\nimport { ListItemText, ButtonGroup, Button } from \"@material-ui/core\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport \"./Hero.css\";\r\n\r\nfunction Todo(props) {\r\n  const [state, setState] = useState(false);\r\n  const [edit, setEdit] = useState(\"\");\r\n  const [save, setSave] = useState(\"false\");\r\n\r\n  const editHandler = () => {\r\n    db.collection(\"todos\").doc(props.todo.id).set(\r\n      {\r\n        todo: edit,\r\n      },\r\n      { merge: true }\r\n    );\r\n    setState(save);\r\n  };\r\n  return (\r\n    <>\r\n      <ListItemText>\r\n        {state ? (\r\n          <form>\r\n            <input\r\n              placeholder={props.todo.todo}\r\n              value={edit}\r\n              onChange={(event) => setEdit(event.target.value)}\r\n              className=\"input_save\"\r\n            />\r\n\r\n            <Button\r\n              variant=\"contained\"\r\n              size=\"small\"\r\n              color=\"primary\"\r\n              disabled={!edit}\r\n              type=\"submit\"\r\n              onClick={(e) => setSave(editHandler)}\r\n            >\r\n              Save\r\n            </Button>\r\n          </form>\r\n        ) : (\r\n          props.todo.todo\r\n        )}\r\n      </ListItemText>\r\n      <ButtonGroup disableElevation variant=\"contained\" color=\"primary\">\r\n        <DeleteIcon\r\n          onClick={(event) =>\r\n            db.collection(\"todos\").doc(props.todo.id).delete()\r\n          }\r\n          variant=\"outlined\"\r\n          color=\"secondary\"\r\n        />\r\n        <EditIcon onClick={setState} />\r\n      </ButtonGroup>\r\n      <hr className=\"hr\" />\r\n    </>\r\n  );\r\n}\r\nexport default Todo;\r\n","import \"./Hero.css\";\r\nimport Todo from \"./Todo\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport db from \"../firebase\";\r\nimport firebase from \"firebase\";\r\nimport { TextField, Button } from \"@material-ui/core\";\r\n\r\nexport default function App() {\r\n  const [todos, setTodos] = useState([\"\"]);\r\n  const [input, setInput] = useState(\"\");\r\n  useEffect(() => {\r\n    db.collection(\"todos\")\r\n      .orderBy(\"timestamp\", \"desc\")\r\n      .onSnapshot((snapshot) => {\r\n        setTodos(\r\n          snapshot.docs.map((doc) => ({ id: doc.id, todo: doc.data().todo }))\r\n        );\r\n      });\r\n  }, []);\r\n\r\n  const addTodo = (event) => {\r\n    event.preventDefault(); //stop refreshing page ..store todos IMPORTANT!\r\n    db.collection(\"todos\").add({\r\n      todo: input,\r\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n    });\r\n    setInput(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"body\">\r\n        <h1 className=\"heading\">Todo-List</h1>\r\n        <form className=\"form\" autocomplete=\"off\">\r\n          <TextField\r\n            className=\"input\"\r\n            value={input}\r\n            onChange={(event) => setInput(event.target.value)}\r\n            id=\"standard-basic\"\r\n            label=\"Things to do..\"\r\n          />\r\n\r\n          <Button\r\n            variant=\"contained\"\r\n            size=\"large\"\r\n            color=\"secondary\"\r\n            disabled={!input}\r\n            type=\"submit\"\r\n            onClick={addTodo}\r\n          >\r\n            ADD\r\n          </Button>\r\n        </form>\r\n        <ul>\r\n          {todos.map((todo, i) => (\r\n            <Todo todo={todo} key={todo.i} />\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\nimport Hero from \"./Components/Hero\";\nimport \"./App.css\";\nfunction App() {\n  return (\n    <>\n      <div className=\"App text-center\">\n        <Hero />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}