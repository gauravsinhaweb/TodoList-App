{"version":3,"sources":["firebase.js","Components/Todo.js","Components/Hero.jsx","App.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","Todo","props","useState","state","setState","edit","setEdit","save","setSave","toggle","setToggle","todos","setTodos","editHandler","collection","doc","todo","id","set","merge","useEffect","orderBy","onSnapshot","snapshot","docs","map","data","toggleButton","classes","makeStyles","root","fontSize","fontFamily","marginTop","color","textTransform","checked","textDecoration","textDecorationColor","useStyles","ListItemText","className","type","onClick","TextField","placeholder","value","onChange","event","target","length","Button","variant","size","disabled","e","ButtonGroup","disableElevation","delete","App","input","setInput","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","options","height","width","autocomplete","label","preventDefault","add","timestamp","FieldValue","serverTimestamp","i","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cc307a23.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n  apiKey: \"AIzaSyARaXKsyZlb44nx_9B4aUN3A7GKTaz_jUY\",\r\n  authDomain: \"todo-app-da7d9.firebaseapp.com\",\r\n  projectId: \"todo-app-da7d9\",\r\n  storageBucket: \"todo-app-da7d9.appspot.com\",\r\n  messagingSenderId: \"591570575065\",\r\n  appId: \"1:591570575065:web:0855641849346f79cda8c8\",\r\n  measurementId: \"G-MWBTYM6G03\",\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\nexport default db;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport db from \"../firebase\";\r\nimport {\r\n  ListItemText,\r\n  ButtonGroup,\r\n  Button,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport \"./Hero.css\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nfunction Todo(props) {\r\n  const [state, setState] = useState(false);\r\n  const [edit, setEdit] = useState(\"\");\r\n  const [save, setSave] = useState();\r\n  const [toggle, setToggle] = useState(false);\r\n  const [todos, setTodos] = useState();\r\n  const checkedHandler = () => {\r\n    setToggle(!toggle);\r\n    db.collection(\"todos\").doc(props.todo.id).set(\r\n      {\r\n        toggleButton: !toggle,\r\n      },\r\n      { merge: true }\r\n    );\r\n    \r\n  };\r\n  const editHandler = () => {\r\n    db.collection(\"todos\").doc(props.todo.id).set(\r\n      {\r\n        todo: edit,\r\n      },\r\n      { merge: true }\r\n    );\r\n    setEdit(\"\");\r\n    setState(save);\r\n  };\r\n  useEffect(() => {\r\n    db.collection(\"todos\")\r\n      .orderBy(\"timestamp\")\r\n      .onSnapshot((snapshot) =>\r\n        setTodos(snapshot.docs.map((doc) => doc.data()))\r\n      );\r\n  }, []);\r\n  const useStyles = makeStyles({\r\n    root: {\r\n      fontSize: \" 20px\",\r\n      fontFamily: \"lato\",\r\n      marginTop: \"1rem\",\r\n      color: \"#000\",\r\n      textTransform: \"capitalize\",\r\n    },\r\n    checked: {\r\n      fontSize: \" 20px\",\r\n      fontFamily: \"lato\",\r\n      marginTop: \"1rem\",\r\n      color: \"#BC8F8F\",\r\n      textTransform: \"capitalize\",\r\n      textDecoration: \"line-through\",\r\n      textDecorationColor: \"#A0522D\",\r\n    },\r\n  });\r\n\r\n  const classes = useStyles();\r\n  let toggleButton;\r\n  todos &&\r\n    todos.map((todo) => {\r\n      return (toggleButton = todo.toggleButton);\r\n    });\r\n  return (\r\n    <>\r\n      <ListItemText className={toggleButton ? classes.checked : classes.root}>\r\n        {\" \"}\r\n        <input\r\n          checked={toggleButton ? true : false}\r\n          className={state ? \"displayNone\" : \"checkbox\"}\r\n          type=\"checkbox\"\r\n          onClick={checkedHandler}\r\n        />\r\n        {state ? (\r\n          <form>\r\n            <TextField\r\n              placeholder={props.todo.todo}\r\n              value={edit}\r\n              onChange={(event) => setEdit(event.target.value)}\r\n              className=\"input_save\"\r\n            />\r\n\r\n            <span className={edit.length > 0 ? \"display\" : \"displayNone\"}>\r\n              <Button\r\n                variant=\"contained\"\r\n                size=\"small\"\r\n                color=\"primary\"\r\n                disabled={!edit}\r\n                type=\"submit\"\r\n                onClick={(e) => setSave(editHandler)}\r\n              >\r\n                Save\r\n              </Button>\r\n            </span>\r\n          </form>\r\n        ) : (\r\n          props.todo.todo\r\n        )}\r\n      </ListItemText>\r\n      <ButtonGroup disableElevation variant=\"contained\" color=\"primary\">\r\n        <DeleteIcon\r\n          onClick={(event) =>\r\n            db.collection(\"todos\").doc(props.todo.id).delete()\r\n          }\r\n          variant=\"outlined\"\r\n          color=\"secondary\"\r\n        />\r\n        <EditIcon onClick={() => setState(!state)} />\r\n      </ButtonGroup>\r\n      <hr className=\"hr\" />\r\n    </>\r\n  );\r\n}\r\nexport default Todo;\r\n","import \"./Hero.css\";\r\nimport Todo from \"./Todo\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport db from \"../firebase\";\r\nimport firebase from \"firebase\";\r\nimport { TextField, Button } from \"@material-ui/core\";\r\nimport animationData from \"../Assets/rocket.json\";\r\nimport Lottie from \"react-lottie\";\r\n\r\nexport default function App({ toggle }) {\r\n  const [todos, setTodos] = useState([\"\"]);\r\n  const [input, setInput] = useState(\"\");\r\n  useEffect(() => {\r\n    db.collection(\"todos\")\r\n      .orderBy(\"timestamp\", \"desc\")\r\n      .onSnapshot((snapshot) => {\r\n        setTodos(\r\n          snapshot.docs.map((doc) => ({ id: doc.id, todo: doc.data().todo }))\r\n        );\r\n      });\r\n  }, []);\r\n\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: animationData,\r\n    rendererSettings: {\r\n      preserveAspectRatio: \"xMidYMid slice\",\r\n    },\r\n  };\r\n\r\n  const addTodo = (event) => {\r\n    event.preventDefault(); //stop refreshing page ..store todos IMPORTANT!\r\n    db.collection(\"todos\").add({\r\n      todo: input,\r\n      toggleButton: \"\",\r\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n    });\r\n    setInput(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {\" \"}\r\n      <div className=\"rocket\">\r\n        <Lottie options={defaultOptions} height={75} width={75} />\r\n      </div>\r\n      <div className=\"body\">\r\n        <h1 className=\"heading\">Todo-List </h1>\r\n\r\n        <form className=\"form\" autocomplete=\"off\">\r\n          <TextField\r\n            className=\"input\"\r\n            value={input}\r\n            onChange={(event) => setInput(event.target.value)}\r\n            id=\"standard-basic\"\r\n            label=\"Things to do..\"\r\n          />\r\n          <span className={input.length > 0 ? \"display\" : \"displayNone\"}>\r\n            {\" \"}\r\n            <Button\r\n              variant=\"contained\"\r\n              size=\"large\"\r\n              color=\"secondary\"\r\n              disabled={!input}\r\n              type=\"submit\"\r\n              onClick={addTodo}\r\n            >\r\n              ADD\r\n            </Button>\r\n          </span>\r\n        </form>\r\n        <ul>\r\n          {todos.map((todo, i) => (\r\n            <Todo todo={todo} key={i} />\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\nimport Hero from \"./Components/Hero\";\nimport \"./App.css\";\nfunction App() {\n  return (\n    <>\n      <div className=\"App text-center\">\n        <Hero />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}